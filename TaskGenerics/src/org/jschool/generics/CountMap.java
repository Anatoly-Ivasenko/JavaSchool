package org.jschool.generics;

import java.util.Map;

/**
 * Интерфейс контейнера для хранения и учета количества объектов типа T.
 */
public interface CountMap<T> {

   /**
    * Добавляет указанный объект типа T в контейнер.
    * @param element добавляемый в контейнер объект
    */
    void add(T element);

   /**
    * Возвращает количество хранимых в контейнере экземпляров указанного объекта типа T.
    * @param element целевой объект
    * @return        количество хранимых в контейнере экземпляров указанного объекта
    */
    int getCount(T element);

   /**
    * Удаляет из контейнера один экземпляр указанного объекта типа T и возвращает
    * количество хранимых в контейнере экземпляров указанного объекта до удаления.
    * @param element целевой объект
    * @return        количество хранимых в контейнере экземпляров указанного объекта до удаления
    */
    int remove(T element);

   /**
    * Возвращает количество различных объектов типа T, хранимых в контейнере.
    * @return  количество различных объектов, хранимых в контейнере
    */
    int size();

   /**
    * Добавляет в контейнер все объекты указанного контейнера.
    * Указанный контейнер должен содержать объекты типа T или любого наследуемого от T типа.
    * @param source  Контейнер объектов типа T или любого наследуемого от T типа
    */
    void addAll(CountMap<? extends T> source);

   /**
    * Возвращает java.util.Map, содержащий ключами различные объекты, хранимые в контейнере,
    * а значениями - количеством экземпляров этих объектов, хранимых в контейнере.
    * @return  java.util.Map, с ключамим - объектами и их количеством в качестве значений
    */
    Map<? super T, Integer> toMap();

   /**
    * Очищает указанный объект destination и заполняет его ключами - различными объектами, хранимыми в контейнере
    * и значениями - количеством экземпляров этих объектов, хранимых в контейнере.
    * @param destination   указанный объект, в который записывает информация о хранимых в контейнере объектах
    */
    void toMap(Map<? super T, Integer> destination);
}
